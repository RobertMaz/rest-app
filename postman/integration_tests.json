{
	"info": {
		"_postman_id": "8c28c872-cdda-48cd-8490-57b86ea65045",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Auth to backend', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"\r",
									"    const request = JSON.parse(pm.request.body)\r",
									"    var res = pm.response.json();\r",
									"    pm.expect(request).to.not.empty;\r",
									"    pm.environment.set(\"token\", res.token)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"user\",\r\n    \"password\": \"pwd\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('createUser', () => {\r",
									"    pm.response.to.have.status(201)\r",
									"\r",
									"    const request = JSON.parse(pm.request.body)\r",
									"    pm.expect(request).to.not.empty;\r",
									"    pm.collectionVariables.set(\"email\", request.email)\r",
									"\r",
									"    const location = pm.response.headers.get(\"Location\")\r",
									"    pm.expect(location).to.not.empty;\r",
									"    var userId = location.split(\"/\").pop()\r",
									"    pm.collectionVariables.set(\"userId\", Number(userId))\r",
									"    pm.collectionVariables.set(\"name\", request.name)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"age\": 21,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"superuser\",\r\n    \"password\": \"pwd\",\r\n    \"profile\": {\r\n        \"cash\": {{$randomInt}}\r\n    },\r\n    \"phones\": [\r\n        {\r\n            \"value\": \"{{$randomPhoneNumber}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCreatedUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('get user', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    \r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.id).to.eq(pm.collectionVariables.get('userId'))\r",
									"    pm.expect(response.email).to.eq(pm.collectionVariables.get('email'))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updateEmailSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('update user email', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"    \r",
									"    const request = JSON.parse(pm.request.body)\r",
									"    pm.collectionVariables.set(\"email\", request.email)\r",
									"    \r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.email).to.eq(request.email)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Remove Person from Department] /api/v1/departments/:departmentId/:personId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('remove user', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('remove user', () => {\r",
									"    pm.response.to.have.status(403)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"age\": 21,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"profile\": {\r\n        \"cash\": {{$randomInt}}\r\n    },\r\n    \"phones\": [\r\n        {\r\n            \"value\": \"{{$randomPhoneNumber}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "profileCashe",
			"value": ""
		},
		{
			"key": "departmentId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}